// find N-digit number in the range L to R whose sum==x
#include<bits/stdc++.h>
#define ll long long
using namespace std;
int dp[20][181][2];
int solve(string& num,int n,int x,bool tight){
	if(x<0) return 0;
	int ub=tight?(num[(num.length()-n)]-'0'):9;
	if(n==1){
		if(x<=ub) return 1;
		return 0;
	}
	if(dp[n][x][tight]!=-1) return dp[n][x][tight];
	int answer=0;
	for(int digit=0;digit<=ub;digit++){
		answer+=solve(num,n-1,x-digit,(tight&(digit==ub)));
	}
	return dp[n][x][tight]=answer;
}
int main(){
	int t;
	cin>>t;
	while(t--){
		ll L,R,x;
	    cin>>L>>R>>x;
	    if(L!=0) L--;
	    string l=to_string(L);
	    string r=to_string(R);
	    memset(dp,-1,sizeof dp);
	    ll fr=solve(r,r.length(),x,1);
	    memset(dp,-1,sizeof dp);
	    ll fl=solve(l,l.length(),x,1);
	    cout<<fr-fl<<"\n";
	}
	return 0;
}

// constraints 
// 1<=T<=100
// 1<=L<=R<=10^18
// T.C=O(log10(R)*10)
